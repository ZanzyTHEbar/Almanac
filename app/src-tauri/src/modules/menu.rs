use std::env::consts;

use tauri::{
  api::dialog::ask, AboutMetadata, CustomMenuItem, Manager, SystemTray, SystemTrayEvent,
  SystemTrayMenu, SystemTrayMenuItem, SystemTraySubmenu,
};

pub(crate) fn get_menu() -> SystemTrayMenu {
  match consts::OS {
    "macos" => custom_menu_bar(),
    "windows" => custom_menu_bar(),
    _ => SystemTrayMenu::new(),
  }
}

fn custom_menu_bar() -> SystemTrayMenu {
  //version: Some("0.1.0".to_string()),
  ///// The authors of the application.
  //authors: Some(vec!["".to_string()]),
  ///// Application comments.
  //comments: Some("EyeTrackVR".to_string()),
  ///// The copyright of the application.
  //copyright: Some("".to_string()),
  ///// The license of the application.
  //license: Some("".to_string()),
  ///// The application website.
  //website: Some("".to_string()),
  ///// The website label.
  //website_label: Some("".to_string()) ,
  let about_menu_data = AboutMetadata::new()
    .version("")
    // TODO: Break this out into a metadata file generated by repo commit history
    // TODO: fill out about metadata
    .authors(vec![
      "ZanzyTHEBar".to_string(),
      "Luckmer".to_string(),
      "Assassin".to_string(),
      "RedHawk989".to_string(),
      "Lorow".to_string(),
      "Summer".to_string(),
    ])
    .comments("EyeTrackVR")
    .license("MIT")
    .website("https://docs.eyetrackvr.dev/")
    .website_label("EyeTrackVR");

  // iterate through authors and create a string of authors
  let authors = about_menu_data
    .authors
    .unwrap_or(vec!["".to_string()])
    .iter()
    .map(|author| format!("{} ", author))
    .collect::<Vec<String>>()
    .join(", \n");

  let about_menu = SystemTrayMenu::new()
    .add_item(CustomMenuItem::new("about".to_string(), "About").accelerator("CmdOrCtrl+I"))
    .add_native_item(SystemTrayMenuItem::Separator)
    .add_item(CustomMenuItem::new(
      "version",
      format!(
        "Version: {}",
        about_menu_data.version.unwrap_or("".to_string())
      ),
    ))
    .add_item(CustomMenuItem::new(
      "authors",
      format!("Authors: \n{}", authors),
    ))
    .add_item(CustomMenuItem::new(
      "comments",
      format!(
        "Comments: {}",
        about_menu_data.comments.unwrap_or("".to_string())
      ),
    ))
    .add_item(CustomMenuItem::new(
      "license",
      format!(
        "License: {}",
        about_menu_data.license.unwrap_or("".to_string())
      ),
    ))
    .add_item(CustomMenuItem::new(
      "website",
      format!(
        "Website: {}",
        about_menu_data.website.unwrap_or("".to_string())
      ),
    ));

  let about_sub_menu = SystemTraySubmenu::new("About", about_menu);

  let app_menu = SystemTrayMenu::new()
    .add_submenu(about_sub_menu)
    .add_native_item(SystemTrayMenuItem::Separator)
    .add_item(
      CustomMenuItem::new("open_settings".to_string(), "Settings...")
        .accelerator("CmdOrCtrl+Comma"),
    )
    .add_item(CustomMenuItem::new("quit".to_string(), "Quit").accelerator("CmdOrCtrl+Q"))
    .add_native_item(SystemTrayMenuItem::Separator)
    .add_item(CustomMenuItem::new("hide".to_string(), "Hide").accelerator("CmdOrCtrl+H"))
    .add_native_item(SystemTrayMenuItem::Separator)
    .add_item(CustomMenuItem::new("show".to_string(), "Show").accelerator("CmdOrCtrl+Shift+H"));

  let view_menu = SystemTrayMenu::new()
    .add_item(CustomMenuItem::new("open_docs".to_string(), "Docs").accelerator("CmdOrCtrl+D"))
    .add_item(CustomMenuItem::new("flash".to_string(), "Flash").accelerator("CmdOrCtrl+W"));

  #[cfg(debug_assertions)]
  let view_menu = {
    let view_menu = view_menu.add_native_item(SystemTrayMenuItem::Separator);

    #[cfg(target_os = "macos")]
    let view_menu = view_menu
      .add_item(CustomMenuItem::new("reload_app".to_string(), "Reload").accelerator("CmdOrCtrl+R"));

    view_menu.add_item(
      CustomMenuItem::new("toggle_devtools".to_string(), "Toggle Developer Tools")
        .accelerator("CmdOrCtrl+Alt+I"),
    )
  };

  SystemTrayMenu::new()
    .add_submenu(SystemTraySubmenu::new("EyeTrackVR", app_menu))
    .add_submenu(SystemTraySubmenu::new("View", view_menu))
}

pub(crate) fn create_system_tray() -> SystemTray {
  SystemTray::new().with_menu(get_menu())
}

pub(crate) fn handle_menu_event<R: tauri::Runtime>(
  app: &tauri::AppHandle<R>,
  event: SystemTrayEvent,
) {
  let window = app.get_window("main").expect("failed to get window");

  match event {
    SystemTrayEvent::LeftClick {
      position: _,
      size: _,
      ..
    } => {
      dbg!("system tray received a left click");
      window.show().unwrap();
    }
    SystemTrayEvent::RightClick {
      position: _,
      size: _,
      ..
    } => {
      dbg!("system tray received a right click");
    }
    SystemTrayEvent::DoubleClick {
      position: _,
      size: _,
      ..
    } => {
      dbg!("system tray received a double click");
    }
    SystemTrayEvent::MenuItemClick { id, .. } => match id.as_str() {
      "quit" => {
        let app_clone = app.clone();

        // ask the user if they want to quit
        ask(
          Some(&window),
          "EyeTrackVR",
          "Are you sure that you want to close this window?",
          move |answer| {
            if answer {
              // .close() cannot be called on the main thread
              app_clone.get_window("main").unwrap().close().unwrap();
            }
          },
        );
      }
      "hide" => {
        window.hide().unwrap();
      }
      "show" => {
        window.show().unwrap();
      }
      "open_settings" => window.emit("keybind", "open_settings").unwrap(),
      "close_devtools" => {
        #[cfg(debug_assertions)]
        if window.is_devtools_open() {
          window.close_devtools();
        } else {
          window.close().unwrap();
        }

        #[cfg(not(debug_assertions))]
        window.close().unwrap();
      }
      #[cfg(debug_assertions)]
      "toggle_devtools" => {
        if window.is_devtools_open() {
          window.close_devtools();
        } else {
          window.open_devtools();
        }
      }
      _ => {}
    },
    _ => {}
  }
}
